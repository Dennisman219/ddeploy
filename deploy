#!/usr/bin/env python3

# Imports
import json, subprocess, os, sys, select

# Opts
stdout = False
stderr = True
config_file = "deploy_config.json"
exclusive = False
for opt in sys.argv[1:]:
	if opt == "-q":
		stdout = False
		stderr = False
	elif opt == "-d":
		stdout = True
		stderr = True
	elif opt == "-v":
		stdout = True
		stderr = True
	elif opt == "-c":
		i = sys.argv.index("-c")
		config_file = sys.argv[i+1]
	elif opt == "-s":
		exclusive = True
		i = sys.argv.index("-s")
		step_name = sys.argv[i+1]

# Functions
def echo(line):
	if stdout:
		sys.stdout.write("{0}\n".format(line))

def out(text):
	if stdout:
		sys.stdout.write("{0}".format(text))
		sys.stdout.flush()

def err(text):
	if stderr:
		sys.stderr.write("{0}".format(text))
		sys.stderr.flush()

def clean_env_vars(items):
	for key, value in items:
		del os.environ[str(key)]
		os.unsetenv(str(key))

# Main
try:
    if os.path.isfile(config_file):
	    #config_file = "deploy_config.json"
	    pass
    elif os.path.isfile(".deploy/"+config_file):
	    config_file = ".deploy/"+config_file

    json_config = json.load(open(config_file))
except FileNotFoundError as e:
	sys.stderr.write("Error ({}): Configuration file '{}' not found\n".format(e.errno, config_file))
	exit(e.errno)

steps = json_config['steps']
for step in steps:
	if 'skip' in step and step['skip'] == True:
		continue

	if 'name' not in step:
		step['name'] = "unnamed_step"

	if exclusive:
		if step['name'] == step_name:
			out("[*] Exclusively running '{}' from '{}'\n".format(step['name'], config_file))
		else:
			continue

	try:
		if os.path.isfile(os.path.join(os.path.dirname(__file__), "modules/", step['module'])):
			path_to_module = os.path.join(os.path.dirname(__file__), "modules/", step['module'])
		elif os.path.isfile(".deploy/modules/"+step['module']):
			path_to_module = ".deploy/modules/"+step['module']
		else:
			sys.stderr.write("[?] {}: Skipping: Cannot find '{}' module/executable. Please check config.\n".format(step['name'], step['module']))
			continue
	except KeyError:
		sys.stderr.write("[?] {}: Skipping: Missing module attribute in step config. Please check config.\n".format(step['name']))
		continue

	env_args = os.environ
	for key, value in step.items():
		env_args[key] = str(value)

	err("[*] {}: Running.\n".format(step['name']))
	p = subprocess.Popen([path_to_module], env=env_args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

	while p.poll() is None:
		try:
			rlist, _, _ = select.select([p.stdout, p.stderr], [], [])
			for stream in rlist:
				if stream == p.stdout:
					line = stream.readline()
					if line:
						out("[*] {}: {}".format(step['name'], line.decode('UTF-8')))
				elif stream == p.stderr:
					line = stream.readline()
					if line:
						err("[?] {}: {}".format(step['name'], line.decode('UTF-8')))
		except ValueError:
			pass
	p.stdout.close()
	p.stderr.close()

	if 'result' in step:
		if p.returncode == step['result'] or step['result'] == -1 :
			err("[*] {}: Done ({}).\n".format(step['name'], p.returncode))
		else:
			err("[!] {}: Failed. Module returned {}, expected {}\n".format(step['name'], p.returncode, step['result']))
			clean_env_vars(step.items())
			exit(p.returncode)
	else:
		if p.returncode != 0:
			err("[!] {}: Failed ({}).\n".format(step['name'], p.returncode))
			clean_env_vars(step.items())
			exit(p.returncode)
		else:
			err("[*] {}: Done ({}).\n".format(step['name'], p.returncode))
	clean_env_vars(step.items())
